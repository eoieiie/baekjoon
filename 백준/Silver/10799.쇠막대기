여는괄호는 temp에 무조건 넣고 

"바로 다음" 에 닫는 괄호다? 그럼 스택에 있는 여는 괄호 하나 pop 하고, 남아있는 스택의 개수만큼 count += 해줌.

근데 여닫 이후 바로 다시 닫는 괄호가 나올 시 마찬가지로 남아있는 스택의 개수만큼 카운트 늘려줌. 

여는 괄로가 나온다면 스택에 넣는걸 반복..

비어있으면 뭐 어쩔 수 없는거고, 따로 예외처리 해줄 필요는 없음.

스택에서 빼고 카운트 올리는 거는 함수로 맹글어서 하면 조을 듯.


변수 : temp, count, res


import sys

def main() -> None:

	input = sys.stdin.readline
	sticks = input().rstrip()

	stack = []
	count = 0
	laser = False

	def increase():
		nonlocal count
		count += len(stack)

#	nonlocal → “내 바깥 함수 지역 변수에 쓸래!” (함수 안 함수 구조일 때만)
#	global → “파일 전역 변수에 쓸래!” (함수 깊이와 무관하게 언제든)

	for stick in sticks:

		if stick == "(":
			stack.append(stick)
			laser = True
			 
	 	elif stick == ")" and laser:
			stack.pop()
		  if stack:
				increase()
			laser = False
		
		elif stick == ")" and not laser:
			stack.pop()		
			count += 1
			
	print(count)

if __name__ == "__main__":
	main()






import sys

def main() -> None:
    input = sys.stdin.readline
    sticks = input().rstrip()

    stack = []         # ← temp → stack 으로 좀 더 직관적으로
    count = 0
    laser = False      # 직전에 본 문자가 '(' 인지 기억하는 플래그

    def increase():
        nonlocal count
        count += len(stack)   # 레이저 자르기: 현재 막대 수만큼 +=

    for ch in sticks:
        if ch == '(':                 # 막대 시작 또는 레이저 시작
            stack.append('(')
            laser = True              # 다음 문자가 ')' 이면 레이저로 판정
        else:  # ch == ')'
            stack.pop()               # 어쨌든 '(' 하나는 사라짐
            if laser:                 # 직전 문자가 '(' → 레이저
                increase()
            else:                     # 레이저가 아닌 단순 막대 끝
                count += 1
            laser = False             # 이번에 ')' 를 봤으니 다음엔 레이저 아님

    print(count)

if __name__ == "__main__":
    main()

 